{"version":3,"sources":["components/ErrorBoundary.js","components/Table.js","components/Button.js","components/Search.js","components sync /^.*$","components/images/diehard.jpg","components/images/gremlins.jpg","components/images/jaws.jpg","data/temporaryList.js","App.js","serviceWorker.js","index.js"],"names":["ErrorBoundary","props","state","hasError","error","info","console","log","this","setState","children","Component","Table","searchTerm","list","pattern","onDismiss","className","filter","item","title","toLowerCase","includes","map","key","objectID","src","require","image","alt","director","onClick","Button","type","Search","value","onChange","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","path","App","bind","onSearchChange","updatedList","event","target","err","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3804ad1e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false }\n\n    }\n\n\n    componentDidCatch(error, info) {\n        console.log(error, info);\n        //display fallbackUI\n        this.setState({ hasError: true });\n\n    }\n\n    render(){\n        if(this.state.hasError){\n        \n            return <h1>Oops something went wrong</h1>\n        }\n        return this.props.children;\n    }\n\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport Button from './Button';\n//import list from '../data/temporaryList';\n\n\nconst Table = ({ list, pattern, onDismiss }) => {\n    const isSearched = searchTerm => {\n        return item => {\n            return item.title.toLowerCase().includes(searchTerm.toLowerCase());\n        }\n    }\n    return (\n        <div className='Results-Container'>\n\n            {list.filter(isSearched(pattern)).map(item =>\n\n                    <div className='Results-Details' key={item.objectID} >\n\n                        <div>\n\n                            <img src={require(`${item.image}`)} alt={`Movie Poster: ${item.title}`} />\n\n                            <p>Movie Title : {item.title}</p>\n                        </div>\n                        <div>\n                            <p>Director : {item.director}</p>\n                        </div>\n                        <span>\n                            <Button\n                                onClick={() => onDismiss(item.objectID)}\n                                className='Button Dismiss'\n                            >\n                                Dismiss\n              </Button>\n                            {/* <Button //show difference of being able to pass className as props instead\n                onClick={() => onDismiss(item.objectID)}\n                className='Button'\n              >\n                Dismiss\n              </Button> */}\n\n                        </span>\n\n\n                    </div>\n            \n\n            )}\n\n\n        </div>\n    )\n\n}\n\nexport default Table;","import React from 'react';\n\nconst Button = ({ onClick, className = '', children }) =>\n    <button onClick={onClick}\n        className={className}\n        // style={greenFont}//example of inline style as a variable\n        type='button'>\n        {children}\n    </button>\n\nexport default Button;","import React from 'react';\n\nconst Search = ({ value, onChange, children }) =>\n  //this.props.value, const {value} = this.props also is {value} when passed as argument it is automatically destructed for you and considered a prop\n  //{ is wanting to use anything in between like condition etc use curly brackets and return (jsx here)\n\n  <form className='Search'>\n    <input\n      type='text'\n      value={value}\n      onChange={onChange}\n\n    ></input>\n    {children}\n  </form>\n\nexport default Search;","var map = {\n\t\"./Button\": 4,\n\t\"./Button.js\": 4,\n\t\"./ErrorBoundary\": 1,\n\t\"./ErrorBoundary.js\": 1,\n\t\"./Search\": 5,\n\t\"./Search.js\": 5,\n\t\"./Table\": 3,\n\t\"./Table.js\": 3,\n\t\"./images/diehard.jpg\": 20,\n\t\"./images/gremlins.jpg\": 21,\n\t\"./images/jaws.jpg\": 22\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 19;","module.exports = __webpack_public_path__ + \"static/media/diehard.e46370da.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gremlins.c8e1d5c4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jaws.7c3c74dc.jpg\";","const path =  './images/';\n\n\nconst list = [\n    {\n      title: 'Jaws',\n      director: 'Amanda',\n      objectID: 0,\n      image:`${path}jawsz.jpg`\n    },\n    {\n      title: 'Die Hard',\n      director: 'George',\n      objectID: 2,\n      image:`${path}diehard.jpg`\n    },\n    {\n      title: 'Gremlins',\n      director: 'James',\n      objectID: 3,\n      image:`${path}gremlins.jpg`\n    },\n    {\n      title: 'Jaws2',\n      director: 'Amanda',\n      objectID: 4,\n      image:`${path}jaws.jpg`\n    },\n    {\n      title: 'Die Hard2',\n      director: 'George',\n      objectID: 5,\n      image:`${path}diehard.jpg`\n    },\n    {\n      title: 'Gremlins2',\n      director: 'James',\n      objectID: 6,\n      image:`${path}gremlins.jpg`\n    }\n  ]\n\n\n\n\n\n  export default list;","import React, { Component } from 'react';\nimport './App.scss';\nimport list from './data/temporaryList'\nimport Table from './components/Table';\nimport Search from './components/Search';\nimport ErrorBoundary from './components/ErrorBoundary'\n\n//npm run deploy\n\n\n\n//http://www.omdbapi.com/ hook this up later\n\n// const isSearched = searchTerm => {\n//   return item => {\n//     return item.title.toLowerCase().includes(searchTerm.toLowerCase());\n//   }\n// }\n//moved this into the table component\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list,\n      searchTerm: ''\n    }\n\n    this.onDismiss = this.onDismiss.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n  }\n\n  onDismiss(id) {\n    const updatedList = this.state.list.filter(item => item.objectID !== id);\n    this.setState({\n      list: updatedList\n    })\n\n  }\n\n  onSearchChange(event) {\n    try {\n      this.setState({\n        searchTerm: event.target.value\n\n      })\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n\n\n\n\n  render() {\n    const { searchTerm, list } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Movie Search</h1>\n        </header>\n        <div className='Featured'>\n\n        </div>\n        <ErrorBoundary>\n          <Search\n            value={searchTerm}\n            onChange={this.onSearchChange}\n          ><p>Search a movie title</p>\n          </Search>\n        </ErrorBoundary>\n        <ErrorBoundary>\n          <Table\n            list={list}\n            pattern={searchTerm}\n            onDismiss={this.onDismiss}\n          />\n        </ErrorBoundary>\n\n      </div>\n    );\n  }\n}\n\n// class Table extends Component {\n//   render() {\n//     const isSearched = searchTerm => {\n//       return item => {\n//         return item.title.toLowerCase().includes(searchTerm.toLowerCase());\n//       }\n//     }\n//     const { list, pattern, onDismiss } = this.props\n//     return (\n//       <div className='Results-Container'>\n//         {list.filter(isSearched(pattern)).map(item =>\n//           <div className='Results-Details' key={item.objectID} >\n\n//             <div>\n//               <img src={require(`${item.image}`)} alt={`Movie Poster: ${item.title}`} />\n//               <p>Movie Title : {item.title}</p>\n//             </div>\n//             <div>\n//               <p>Director : {item.director}</p>\n//             </div>\n//             <span>\n//               <Button\n//                 onClick={() => onDismiss(item.objectID)}\n//                 className='Button Dismiss'\n//               >\n//                 Dismiss\n//               </Button>\n//               {/* <Button //show difference of being able to pass className as props instead\n//                 onClick={() => onDismiss(item.objectID)}\n//                 className='Button'\n//               >\n//                 Dismiss\n//               </Button> */}\n\n//             </span>\n\n\n//           </div>\n\n//         )}\n\n//       </div>\n//     )\n//   }\n// }\n\n\n// const Table = ({ list, pattern, onDismiss }) => {\n//   const isSearched = searchTerm => {\n//     return item => {\n//       return item.title.toLowerCase().includes(searchTerm.toLowerCase());\n//     }\n//   }\n//   return (\n//     <div className='Results-Container'>\n//       {list.filter(isSearched(pattern)).map(item =>\n//         <div className='Results-Details' key={item.objectID} >\n\n//           <div>\n//             <img src={require(`${item.image}`)} alt={`Movie Poster: ${item.title}`} />\n//             <p>Movie Title : {item.title}</p>\n//           </div>\n//           <div>\n//             <p>Director : {item.director}</p>\n//           </div>\n//           <span>\n//             <Button\n//               onClick={() => onDismiss(item.objectID)}\n//               className='Button Dismiss'\n//             >\n//               Dismiss\n//             </Button>\n//             {/* <Button //show difference of being able to pass className as props instead\n//               onClick={() => onDismiss(item.objectID)}\n//               className='Button'\n//             >\n//               Dismiss\n//             </Button> */}\n\n//           </span>\n\n\n//         </div>\n\n//       )}\n\n//     </div>\n//   )\n\n// }\n\n// // class Search extends Component {\n// //   render() {\n// //     const { value, onChange, children } = this.props\n// //     return (\n// //       <form className='Search'>\n// //         <input\n// //           type='text'\n// //           value={value}\n// //           onChange={onChange}\n\n// //         ></input>\n// //         {children}\n// //       </form>\n\n// //     )\n// //   }\n// // }\n\n// // function Search({ value, onChange, children }){\n// //   return(\n// //     <form className='Search'>\n// //     <input\n// //       type='text'\n// //       value={value}\n// //       onChange={onChange}\n\n// //     ></input>\n// //     {children}\n// //   </form>\n// //   )\n\n// // }\n\n// //changing to arrow function, remove block body, is now a concise body and the return is attached\n// const Search = ({ value, onChange, children }) =>\n//   //this.props.value, const {value} = this.props also is {value} when passed as argument it is automatically destructed for you and considered a prop\n//   //{ is wanting to use anything in between like condition etc use curly brackets and return (jsx here)\n\n//   <form className='Search'>\n//     <input\n//       type='text'\n//       value={value}\n//       onChange={onChange}\n\n//     ></input>\n//     {children}\n//   </form>\n\n// //}\n\n\n// //example of inline style but using variables instead\n\n\n\n\n\n// // class Button extends Component {\n// //   render() {\n// //     //leave className optional by assigning when destructuring will override if there is a prop of className assigned within the component when its instantiated\n// //     const { onClick, className = '', children } = this.props;\n// //     return (\n// //       <button onClick={onClick}\n// //         className={className}\n// //         type='button'>\n// //         {children}\n// //       </button>\n// //     )\n// //   }\n// // }\n\n\n// //reminder instead of accessing with this.props and passing props we're destructuring within the parameter, the arguments are being destructured to access the props\n\n// // const greenFont = { color: 'green' }\n// const Button = ({ onClick, className = '', children }) =>\n//   <button onClick={onClick}\n//     className={className}\n//     // style={greenFont}//example of inline style as a variable\n//     type='button'>\n//     {children}\n//   </button>\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}